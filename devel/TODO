=== Documentation ===

Bitfields are not yet supported!

Write the README file...


=== Tests ===

test pragmas.
test double typed enum scalars...

preproc.t
pragma.t
int.t
enum.t
ptr.t
byteorder.t
floating.t


=== Implementation ===

New boolean options UnsignedChars and Verbose.
Verbose should set emit_warnings and print some
warnings about stuff that's not already handled
like unsupported pragma's, divisions by zero,
etc.

Implement casts as a first step towards constant address
arithmetics.

Check that bison stuff over and over again!!!

Warnings during pack() could be further improved. ('name')

Perhaps optimize all that sizeof stuff in Get/SetBasicType
(add size member to TypeSpec?)

Improve #pragma pack with more options (like MSVC)

Support constant address arithmetics and casts like in

  ((int)&((HuselMusel *)0)->key)

(will require a redesign of the current type_name implementation)

Support signed/unsigned and perhaps casts into all the different types.
(Would require a slight redesign of 'type_name')


=== Unsigned Values / 64-bit support ===

Unsigned 32-bit constants aren't handled correctly. I see the need
for an unsigned flag for constants.
(union: {iv/uv} + flag)

Also, 64-bit values (long long) aren't supported yet. But I don't
think that's a big issue unless someone makes it one ;-)


=== Preprocessor ===

Try to make the preprocessor re-entrant.


=== Data Structures ===

By the time all of the above is done and the code works fine,
it's possible to give the whole project a performance boost by
redesigning the data structures. I'm pretty sure the Linked List
Library is cool to start up such a project, but all the mallocs
it performs aren't really good for the overall performance.
