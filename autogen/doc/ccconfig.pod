
=head1 NAME

ccconfig - Get Convert::Binary::C configuration for a compiler

=head1 SYNOPSIS

ccconfig I<options> [-- compiler-options]

I<options>:

  -c         compiler
  --cc       compiler    compiler executable to test
                         default: auto-determined
  
  -p
  --ppout    flag        compiler option for sending
                         preprocessor output to stdout
                         default: -E
  
  -t
  --temp     file        name of the temporary test file
                         default: _t_e_s_t.c
  
  --nodelete             don't delete temporary files
  
  --norun                don't try to run executables
  
  --quiet                don't display anything
  --nostatus             don't display status indicator
  
  --debug                debug mode

=head1 DESCRIPTION

C<ccconfig> will try to determine a usable configuration for
Convert::Binary::C from testing a compiler executable.
It is not necessary that the binaries generated by the compiler
can be executed, so C<ccconfig> can be used for cross-compilers.

The tool is still experimental, and you should neither rely
on its results without checking, nor expect it to work in your
environment.

=head1 OPTIONS

=head2 --cc compiler

This option allows you to explicitly specify a compiler
executable. This is especially useful if you don't want
to use your system compiler.

=head2 --ppout flag

This option tells C<ccconfig> which flag must be used to
make the compiler write the preprocessor output to standard
output. The default is C<-E>, which is correct for many
compilers.

=head2 --temp

Allows you to change the name of the temporary test file.

=head2 --nodelete

Don't attempt to delete temporary files that have been created
by the compiler. Normally, C<ccconfig> will look for all files
with the same basename as the temporary test file and delete
them.

=head2 --norun

You can specify this option if the executables generated
by your compiler cannot be run on your machine, i.e. if
you have a cross-compiler. However, C<ccconfig> will
automatically find out that it cannot run the executables.

When this option is set, a different set of algorithms is
used to determine a couple of configuration settings. These
algorithms are all based upon placing a special signature
in the object file. They are less reliable that the standard
algorithms, so you shouldn't use them unless you have to.

=head2 --quiet

Don't display anything except for the final configuration.

=head2 --nostatus

Hide the status indicator. Recommended if you want to
redirect the script output to a file:

  ccconfig --nostatus >config.pl 2>ccconfig.log

=head2 --debug

Generate tons of debug output. Don't use unless you know
what you're doing.

=head1 EXAMPLES

Normally, a simple

  ccconfig

without arguments is enough if you want the configuration for
your system compiler.

If you want the configuration for a different compiler,
or C<ccconfig> cannot determine your system compiler
automatically, use

  ccconfig -c gcc32

if your compiler's name is C<gcc32>.

If you want to pass additional options to the compiler, you
can do so after a double-dash on the commandline:

  ccconfig -- -g -DDEBUGGING

or

  ccconfig -c gcc32 -- -ansi -fshort-enums

=head1 COPYRIGHT

Copyright (c) 2002-2003 Marcus Holland-Moritz. All rights reserved.
This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 SEE ALSO

See L<Convert::Binary::C>.

=cut
